dist: xenial   # required for Python >= 3.7
os: linux
language: python

stages:
  - Lint
  - Test

env:
  global:
    - CASSANDRA_HOSTS=127.0.0.1
    - MYSQL_USER=travis
    - POSTGRES_USER=postgres

jobs:
  allow_failures:
    - script: make lint-*

  include:
    - &lint
      stage: Lint
      name: Black
      python: 3.7
      cache: pip

      install:
        - pip install -U virtualenv
        - virtualenv --python=python ../venv
        - source ../venv/bin/activate
        - which python
        - python --version
        - pip install -U pip wheel
        - pip install -e .[dev]

      script: make lint-black

    - <<: *lint
      name: Flake8
      script: make lint-flake8

    - <<: *lint
      name: isort
      script: make lint-isort

    - <<: *lint
      name: MyPy
      script: make lint-mypy

    - name: Dockerfile
      script: make lint-dockerfile

    - &test
      stage: Test
      name: Python 3.6

      cache:
        - apt
        - pip

      services:
        - redis
        - mysql
        - postgresql

      python: 3.6

      before_install:
        - python --version

        # Install OpenJDK 8 (Cassandra 3.11 needs it).
        - sudo apt-get -qq update
        - sudo apt-get install -y openjdk-8-jdk
        - sudo apt-get install -y icedtea-8-plugin
        #  - sudo update-java-alternatives --set /usr/lib/jvm/java-1.8.0-openjdk-amd64
        - sudo update-java-alternatives -v --set java-1.8.0-openjdk-amd64
        #  - source /etc/environment
        - export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64
        - java -version

        # Install Cassandra.
        - sudo rm -rf /var/lib/cassandra/*
        - wget http://www.us.apache.org/dist/cassandra/3.11.6/apache-cassandra-3.11.6-bin.tar.gz
          && tar -xzf apache-cassandra-3.11.6-bin.tar.gz

        # Start Cassandra.
        - sudo sh ./apache-cassandra-3.11.6/bin/cassandra -R

        # Download Axon Server.
        - ./dev/download_axon_server.sh

        # Run Axon Server.
        - ./axonserver/axonserver.jar &

        # Wait for the servers to start (replace this with polling?).
        - sleep 30

      before_script:
        - mysql -e 'CREATE DATABASE eventsourcing;'
        - psql -c 'CREATE DATABASE eventsourcing;' -U postgres

      install:
        - pip install -U virtualenv
        - virtualenv --python=python ../venv
        - source ../venv/bin/activate
        - which python
        - python --version
        - pip install -U pip wheel
        - CASS_DRIVER_NO_CYTHON=1 pip install -e .[testing]
        - pip install pymysql
        - pip install mysql-connector-python-rf
        - pip install python-coveralls
        - pip install -U "coverage<5.0.0"  # v5 is incompatible ATM.

      script:
        - if [[ $TRAVIS_PYTHON_VERSION != pypy* ]]; then
            coverage run --concurrency=multiprocessing -m unittest discover eventsourcing.tests -v;
          fi

        - if [[ $TRAVIS_PYTHON_VERSION == pypy* ]]; then
            python -m unittest discover eventsourcing.tests -v;
          fi

      after_success:
        - if [[ $TRAVIS_PYTHON_VERSION != pypy* ]]; then
            coverage combine;
            coveralls;
          fi

    - <<: *test
      name: Python 3.7
      python: 3.7

    # Not running tests with Python v3.8 because ray doesn't work with it at the moment.
    # - <<: *test
    #   name: Python 3.8
    #   python: 3.8

